#!/bin/bash

# Identificar inst√¢ncia ativa
echo 'üîç Identificando inst√¢ncia ativa...'
VAST_BIN=''
if command -v vastai &>/dev/null; then
  VAST_BIN=$(command -v vastai)
elif command -v vast &>/dev/null; then
  VAST_BIN=$(command -v vast)
else
  echo '‚ùå CLI da vast.ai n√£o encontrado'
  exit 1
fi

INSTANCES_RAW="$($VAST_BIN show instances --raw)"
INSTANCE_ID=$(echo "$INSTANCES_RAW" | jq -r '[.[] | select(.actual_status=="running")][0].id // empty')

if [[ -z "$INSTANCE_ID" ]]; then
  echo '‚ùå Nenhuma inst√¢ncia ativa encontrada.'
  exit 1
fi

echo "‚úÖ Inst√¢ncia encontrada: $INSTANCE_ID"

# Extrair informa√ß√µes SSH
INSTANCE_INFO=$(echo "$INSTANCES_RAW" | jq -r ".[] | select(.id == $INSTANCE_ID)")
SSH_HOST=$(echo "$INSTANCE_INFO" | jq -r '.ssh_host // empty')
SSH_PORT=$(echo "$INSTANCE_INFO" | jq -r '.ssh_port // empty')

if [[ -z "$SSH_HOST" || -z "$SSH_PORT" ]]; then
  echo '‚ùå Erro: N√£o foi poss√≠vel obter informa√ß√µes SSH'
  exit 1
fi

echo "üìã Conectando em: $SSH_HOST:$SSH_PORT"

# Executar pkill via SSH
echo 'üõë Executando pkill no servidor remoto...'
ssh -p $SSH_PORT -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o LogLevel=ERROR -i ~/.ssh/id_ed25519 root@$SSH_HOST 'pkill -9 -f orchestration/main.py && echo "‚úÖ Processo orchestration/main.py morto" || echo "‚ö†Ô∏è  Processo n√£o encontrado ou j√° estava morto"'

echo 'üîç Verificando se o processo foi morto...'
ssh -p $SSH_PORT -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o LogLevel=ERROR -i ~/.ssh/id_ed25519 root@$SSH_HOST 'ps aux | grep orchestration/main.py | grep -v grep || echo "‚úÖ Nenhum processo encontrado"'

echo 'üéØ Comando conclu√≠do!'
