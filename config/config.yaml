# Dynamic Stage 0 - Unified Configuration File
# GPU-Accelerated Feature Engineering Pipeline
# 
# This configuration file consolidates all settings for the pipeline including:
# - Database connectivity
# - Cloud storage (R2)
# - Dask-CUDA cluster settings
# - Feature engineering parameters
# - Processing pipeline configuration
# - Error handling and monitoring
# - Development and debugging options

# Database Configuration
# MySQL database connection settings for task tracking and metadata
database:
  host: ${MYSQL_HOST:localhost}
  port: ${MYSQL_PORT:3010}
  database: ${MYSQL_DATABASE:feature_genesis_db}
  username: ${MYSQL_USERNAME:root}
  password: ${MYSQL_PASSWORD:root}
  charset: utf8mb4
  pool_size: 10
  max_overflow: 20
  pool_timeout: 30
  pool_recycle: 3600

# Cloudflare R2 Storage Configuration
# Cloud storage settings for data input/output
r2:
  account_id: ${R2_ACCOUNT_ID:ac68ac775ba99b267edee7f9b4b3bc4e}
  access_key: ${R2_ACCESS_KEY:0e315105695707ca4fe1e5f83a38f807}
  secret_key: ${R2_SECRET_KEY:5fbf8a2121f48807fdd3abc1c63c28cae6b67424f01e8d20a9cc68b1d47ca515}
  bucket_name: ${R2_BUCKET_NAME:camaleon}
  endpoint_url: ${R2_ENDPOINT_URL:https://ac68ac775ba99b267edee7f9b4b3bc4e.r2.cloudflarestorage.com}
  region: auto

# Dask-CUDA Cluster Configuration
# GPU cluster settings for distributed processing
dask:
  # Worker configuration
  gpus_per_worker: 1  # Uma GPU por worker (otimizado para isolamento)
  threads_per_worker: 1  # Uma thread por worker (evita conflitos GPU)
  memory_limit: "0GB"  # Desabilitado - usar memory_limit_fraction
  memory_limit_fraction: 0.85  # Usa 85% da RAM total, dividido igualmente entre workers
  
  # RMM (RAPIDS Memory Manager) settings - Gerenciamento de memória GPU
  # Tamanhos fixos desabilitados - usando apenas configurações proporcionais
  rmm_pool_size: "0GB"  # Desabilitado - usar rmm_pool_fraction
  rmm_initial_pool_size: "0GB"  # Desabilitado - usar rmm_initial_pool_fraction
  rmm_maximum_pool_size: "0GB"  # Desabilitado - usar rmm_maximum_pool_fraction
  # Pool proporcional de memória na GPU (ativado)
  # Conservative settings for RTX 5090 (32GB VRAM) - stable
  rmm_pool_fraction: 0.60
  rmm_initial_pool_fraction: 0.30
  rmm_maximum_pool_fraction: 0.60
  spilling_enabled: true  # Habilita spill para RAM quando GPU fica cheia
  spilling_target: 0.85  # Alvo de utilização antes do spill (RTX 5090 optimized)
  spilling_max_spill: "64GB"  # Máximo de spill permitido (RTX 5090 conservative)
  
  # Memory management - Gerenciamento de memória RAM
  memory_target_fraction: 0.90  # Alvo de utilização de RAM (90% - RTX 5090 optimized)
  memory_spill_fraction: 0.90  # Inicia spill quando RAM atinge 90% (RTX 5090 conservative)
  local_directory: "/tmp/dask-worker-space"  # Diretório para spill de dados
  
  # Network protocol settings - usar UCX para transfers GPU↔GPU/host
  protocol: "ucx"
  enable_tcp_over_ucx: true
  enable_infiniband: false
  enable_nvlink: true  # Habilitado para GPUs que suportam NVLink

# Feature Engineering Configuration
# Parameters for all feature engineering engines
features:
  # Rolling window configurations for various calculations
  rolling_windows: [10, 20, 50, 100, 200]
  rolling_min_periods: 1
  # JB (Jarque–Bera) aggregates base column and windows
  # Define which series to use as base for JB normality aggregates.
  # If not present in the dataset, the code falls back to the first available return (prefers y_ret_1m).
  jb_base_column: frac_diff_y_ret_1m
  # Optionally override JB windows (defaults to rolling_windows if omitted or empty)
  # jb_windows: [10, 20]
  
  # Rolling correlation configuration
  rolling_corr:
    windows: [15, 30, 60]
    min_periods: 1
  
  # Fractional differentiation configuration
  frac_diff:
    d_values: [0.1, 0.2, 0.3, 0.4, 0.5]
    threshold: 1e-5
    max_lag: 1000
  
  # Baxter-King filter configuration - Filtro passa-banda para séries temporais
  baxter_king:
    low_freq: 6  # Frequência baixa (período longo) - remove tendências
    high_freq: 32  # Frequência alta (período curto) - remove ruído
    k: 12  # Tamanho do kernel do filtro
  # Batch sizes for graph checkpointing (RTX 5090 optimized)
  feature_engineering_batch_size: 32
  # Stage 0: Feature Engineering (generalized) - Engine 2 do pipeline
  feature_engineering:
    baxter_king:
      k: 12  # Tamanho do kernel (2k+1 pontos)
      low_freq: 32  # Período da frequência baixa (remove tendências > 32 períodos)
      high_freq: 6  # Período da frequência alta (remove ruído < 6 períodos)
      causal: true  # Shift temporal para evitar look-ahead bias
      apply_to_all: false  # Aplicar BK somente às colunas listadas em source_columns
      fill_borders: false  # Não preencher bordas para evitar qualquer risco de look-ahead
      # Apply BK to these source columns (if present) - Colunas específicas para BK
      source_columns:
        - 'log_stabilized_y_close'  # Preço em log estabilizado (nível)
        - 'y_close'                 # Preço de fechamento (nível)
        - 'y_weighted_close'        # Proxy de nível
        - 'y_typical_price'         # Proxy de nível
        - 'y_open'                  # Preço de abertura (nível)
        - 'y_high'                  # Máxima (nível)
        - 'y_low'                   # Mínima (nível)
        - 'y_spread_lvl'            # Nível do spread (se usado como série de nível)
  
  # GARCH model configuration (RTX 5090 conservative)
  garch:
    p: 1
    q: 1
    max_iter: 1000
    tolerance: 1e-6
    max_samples: 50000          # RTX 5090 optimized (32GB VRAM)
    min_price_rows: 200         # Mínimo de pontos de preço após limpeza
    min_return_rows: 100        # Mínimo de retornos após diff(log)
    log_price: true             # Usa log para calcular retornos (robusto para escala)
  
  # Distance correlation configuration (RTX 5090 conservative)
  distance_corr:
    max_samples: 150000
  
  # Empirical Mode Decomposition configuration
  emd:
    max_imfs: 10
    tolerance: 1e-8
    max_iterations: 100
  
  # Statistical tests parameters (RTX 5090 conservative)
  distance_corr_max_samples: 500000        # dCor: 500k samples (RTX 5090 optimized)
  distance_corr_tile_size: 2048
  selection_target_column: y_ret_fwd_60m    # Mudado de 15m para 60m para melhor signal-to-noise
  # Optional list to run multi-target sweep (per run, per pair)
  selection_target_columns: []
  dcor_top_k: 50
  dcor_include_permutation: true
  dcor_permutations: 100
  selection_max_rows: 500000
  vif_threshold: 5.0
  mi_threshold: 0.3
  stage3_top_n: 50
  # Stage 3 wrappers (LightGBM) - Legacy format (maintained for compatibility)
  stage3_task: auto  # auto|regression|classification
  stage3_random_state: 42
  stage3_lgbm_enabled: true
  stage3_lgbm_num_leaves: 31
  stage3_lgbm_max_depth: -1
  stage3_lgbm_n_estimators: 300
  stage3_lgbm_learning_rate: 0.05
  stage3_lgbm_feature_fraction: 0.8
  stage3_lgbm_bagging_fraction: 0.8
  stage3_lgbm_bagging_freq: 0
  stage3_lgbm_early_stopping_rounds: 0
  stage3_use_gpu: true
  stage3_wrapper_backend: xgb_gpu  # lgbm|xgb_gpu
  # Stage 3 CatBoost (explicit keys; fallback to LGBM values if omitted)
  stage3_catboost_iterations: 750           # Aumentado para treino mais longo e estável
  stage3_catboost_learning_rate: 0.025      # Reduzido para treinamento mais conservador
  stage3_catboost_depth: 6                  # Aumentado para capturar mais complexidade
  stage3_catboost_l2_leaf_reg: 10           # Regularização L2 para evitar overfitting
  stage3_catboost_bootstrap_type: Bernoulli # Bootstrap robusto
  stage3_catboost_subsample: 0.7           # Subsample para regularização
  stage3_catboost_task_type: GPU            # GPU|CPU
  stage3_catboost_devices: "0"               # GPU device id(s)
  stage3_catboost_thread_count: 1
  stage3_catboost_loss_regression: RMSE
  stage3_catboost_loss_classification: Logloss
  # Walkforward / temporal validation for embedded CatBoost selection
  stage3_cv_splits: 5                       # Use TimeSeriesSplit with K folds (>=2 enables aggregation)
  stage3_cv_min_train: 200                  # Minimum rows in each training fold
  stage3_catboost_early_stopping_rounds: 100 # Aumentado para não cortar prematuramente
  # Data usage control for embedded stage
  stage3_catboost_use_full_dataset: true    # Use full dataset for CatBoost selection
  
  # Vol-scaling target configuration
  enable_vol_scaling: true                  # Enable volatility-adjusted targets
  vol_scaling_method: garch                 # garch|realized_vol|rolling_std
  vol_scaling_window: 60                    # Window for volatility estimation
  vol_scaling_min_vol: 1e-6                # Minimum volatility to avoid division by zero
  
  # Enhanced feature selection stability
  feature_selection_stability: true        # Enable stability-based selection
  stability_threshold: 0.65                # Keep features present in >= 65% of folds
  enable_mrmr_diversification: true        # Apply mRMR for diversity post-ranking
  mrmr_k: 30                               # Top-k features for mRMR
  
  # Post-selection validation
  stage3_post_selection_validation: true   # Re-train with selected features and compare metrics
  
  # Post-selection validation
  stage3_enable_post_validation: true      # Re-train with selected features for real performance metrics
  
  # Force GPU usage for all stages
  force_gpu_usage: true
  gpu_fallback_enabled: false  # Disable CPU fallbacks to force GPU usage
  # Stage 3 embedded selector (SelectFromModel)
  stage3_selector_method: selectfrommodel   # wrappers|selectfrommodel
  stage3_importance_type: gain              # gain|split|weight (backend-dependent)
  stage3_importance_threshold: 0.75        # Percentil 75% em vez de median para seleção mais rigorosa
  stage3_save_importances_format: json      # json|parquet
  # Stage 3 sampling/labels controls
  stage3_stratified_sampling: true
  stage3_classification_max_classes: 10
  dcor_min_threshold: 0.5
  dcor_min_percentile: 0.0
  stage1_top_n: 80
  # Additional Stage 1 gating thresholds
  correlation_min_threshold: 0.0   # abs(Pearson) minimum; 0.0 disables
  pvalue_max_alpha: 1.0            # F-test p-value max; 1.0 disables
  dcor_fast_1d_enabled: true
  dcor_fast_1d_bins: 2048
  dcor_permutation_top_k: 50
  dcor_permutations: 100
  dcor_pvalue_alpha: 0.05
  # Stage 1 batching for progress visibility
  dcor_batch_size: 128
  # Stage 1 rolling dCor (exposed)
  stage1_rolling_enabled: true
  stage1_rolling_window: 1200     # diagnóstico: janela menor para aumentar janelas válidas
  stage1_rolling_step: 500
  stage1_rolling_min_periods: 200
  # Minimum pairwise valid observations per rolling window (handles sparse/off-hours data)
  stage1_rolling_min_valid_pairs: 400   # diagnóstico: ~33% de 1200
  stage1_rolling_max_rows: 50000
  stage1_rolling_max_windows: 20
  stage1_agg: median  # diagnóstico: usar mediana para robustez
  # Session masks (UTC) for external drivers (applied in Stage 1 dCor/permutation)
  sessions:
    drivers:
      dxy:
        weekmask: [0,1,2,3,4]
        # 24h Mon-Fri (adjust if you have exact sessions)
        open_windows:
          0: [[0, 1440]]
          1: [[0, 1440]]
          2: [[0, 1440]]
          3: [[0, 1440]]
          4: [[0, 1440]]
        holidays: []
      spx:
        weekmask: [0,1,2,3,4]
        # US cash 13:30–20:00 UTC (810–1200 minutes)
        open_windows:
          0: [[810, 1200]]
          1: [[810, 1200]]
          2: [[810, 1200]]
          3: [[810, 1200]]
          4: [[810, 1200]]
        holidays: []
      brent:
        weekmask: [0,1,2,3,4]
        # Approximate ICE Brent: 01:00–23:00 UTC
        open_windows:
          0: [[60, 1380]]
          1: [[60, 1380]]
          2: [[60, 1380]]
          3: [[60, 1380]]
          4: [[60, 1380]]
        holidays: []
      ust10y:
        weekmask: [0,1,2,3,4]
        # Approximate US cash bonds: 12:00–22:00 UTC
        open_windows:
          0: [[720, 1320]]
          1: [[720, 1320]]
          2: [[720, 1320]]
          3: [[720, 1320]]
          4: [[720, 1320]]
        holidays: []
      bund:
        weekmask: [0,1,2,3,4]
        # Approximate DE cash: 07:00–16:30 UTC
        open_windows:
          0: [[420, 990]]
          1: [[420, 990]]
          2: [[420, 990]]
          3: [[420, 990]]
          4: [[420, 990]]
        holidays: []
      ukgilt:
        weekmask: [0,1,2,3,4]
        # Approximate UK cash: 08:00–16:30 UTC
        open_windows:
          0: [[480, 990]]
          1: [[480, 990]]
          2: [[480, 990]]
          3: [[480, 990]]
          4: [[480, 990]]
        holidays: []
      dax:
        weekmask: [0,1,2,3,4]
        # Approximate cash: 08:00–16:30 UTC
        open_windows:
          0: [[480, 990]]
          1: [[480, 990]]
          2: [[480, 990]]
          3: [[480, 990]]
          4: [[480, 990]]
        holidays: []
      xau:
        weekmask: [0,1,2,3,4]
        # Approximate nearly 23h: 01:00–23:00 UTC
        open_windows:
          0: [[60, 1380]]
          1: [[60, 1380]]
          2: [[60, 1380]]
          3: [[60, 1380]]
          4: [[60, 1380]]
        holidays: []
    # Map feature substrings to driver keys
    feature_prefix_map:
      dxy: dxy
      _dxy: dxy
      spx: spx
      _spx: spx
      brent: brent
      _brent: brent
      ust10y: ust10y
      _ust10y: ust10y
      bund: bund
      _bund: bund
      ukgilt: ukgilt
      gilt: ukgilt
      _ukgilt: ukgilt
      dax: dax
      _dax: dax
      xau: xau
      _xau: xau
    # Map driver keys to existing boolean open-flag columns (preferred when present)
    open_flag_map:
      dxy: is_dxy_open
      spx: is_spx_open
      brent: is_brent_open
      ust10y: [is_ust_open, is_ust10y_open]
      bund: is_bund_open
      ukgilt: is_ukgilt_open
      dax: is_dax_open
      xau: is_xau_open
  # Data-driven session auto-mask (UTC-agnostic; usa gaps/NaNs por janela)
  session_auto_mask:
    enabled: true
    window_rows: 120        # tamanho da janela (em linhas) para contagem de válidos
    min_valid: 60           # diagnóstico: relaxa cobertura mínima para 50%
  # Stage 1 logging (diagnóstico)
  stage1_log_all_scores: true
  stage1_log_top_k: 500
  stage1_use_rolling_scores: true
  # Session-aware coverage thresholds and sampling expansion
  stage1_min_coverage_ratio_driver: 0.10
  stage1_min_open_fraction_for_sampling: 0.20
  # Stage 2 pre-VIF/MI NaN handling for non-driver features
  impute_non_driver_nans:
    enabled: true
    method: median   # median|ffill|bfill|ffill_bfill
    limit_ffill: 0   # 0 = unlimited
  drop_non_driver_columns_with_missing:
    enabled: false
    max_missing_ratio: 0.5
  # Dataset schema/feature gating (leakage control)
  dataset_target_columns: []         # list of label/target columns present in the dataset
  dataset_target_prefixes: ["m1_", "m2_", "m3_", "m4_", "m5_", "m6_", "m7_", "m8_", "m9_"]  # model targets m1..m9
  feature_allowlist: []              # exact feature names allowed (if non-empty, acts as allowlist)
  feature_allow_prefixes: []         # prefixes allowed (any match passes allowlist)
  feature_denylist: [
    "y_tick_volume",
    "y_total_volume",
    "y_minutes_since_open",
    # Skip FVG features from Stage 1 dCor candidates (keep in dataset)
    "y_fvg_age_bars",
    "y_fvg_confidence_score",
    "y_fvg_distance_pips",
    "y_fvg_width_pips",
    # Explicit bad/incorrect features from source
    "y_jarque_bera_30m",
    "dxy_ret_1m_var_240",
    # Not a feature: internal fracdiff parameter broadcast
    "y_fracdiff_d"
  ]  # exclude raw volume features, session offset, selected FVG metrics, bad inputs, and non-features
  feature_deny_prefixes: ["y_ret_fwd_", "is_", "y_is_", "bk_filter_"]  # exclude forward labels, flags (is_*), BK outputs
  feature_deny_regex: ["_mask$", "_flag$"]  # generic masks/flags (optional)
  # Stage 1 only: skip from dCor candidates (do not drop from dataset)
  stage1_feature_denylist: ["y_ls_strength_pips"]
  metrics_prefixes: ["dcor_", "dcor_roll_", "dcor_pvalue_", "stage1_", "cpcv_"]
  # Always-keep protections (bypass Stage 1 drop and ensure retention)
  always_keep_features: []
  always_keep_prefixes: ["garch_"]
  # Visibility controls
  stage1_broadcast_scores: false   # if true, add dcor_* columns (1 per feature)
  stage1_broadcast_rolling: false  # if true, add dcor_roll_* and dcor_roll_cnt_* columns
  debug_write_artifacts: true      # persist JSON artifacts for transparency
  artifacts_dir: artifacts         # subfolder under output_path
  drop_metric_columns_on_save: true
  # Fractional diff cache/tuning (exposed)
  fracdiff_cache_max_entries: 32
  fracdiff_partition_threshold: 4096
  # Rolling correlation pair selection: 'first' (order-based) or 'dcor' (top by Stage 1 dCor)
  rolling_corr_pair_selection: dcor
  # Compute rolling correlations after Stage 1 using dCor rankings
  post_stage1_rolling_corr: true
  # Broadcast dCor scores to enable downstream use (required for 'dcor' mode)
  stage1_broadcast_scores: true
  # Dashboard: submit Stage 1 dCor tasks per-feature (more tasks; enable only for debug)
  stage1_dashboard_per_feature: true
  # Stage 1: GPU-direct sampling (avoid pandas on driver)
  stage1_gpu_direct: true
  # MI GPU redundancy (Stage 2) - GPU only
  mi_threshold: 0.1              # Lower threshold for more aggressive redundancy removal
  mi_bins: 32                    # Number of bins for MI histogram (default: 64, try 32 for more sensitivity)
  mi_chunk_size: 128              # Chunk size for MI computation (RTX 5090 optimized)
  mi_min_samples: 5              # Minimum samples required for MI computation (default: 10)
  cpcv_enabled: true
  cpcv_n_groups: 10
  cpcv_k_leave_out: 2
  cpcv_purge: 50       # ~1 hora de purge para evitar leakage
  cpcv_embargo: 100    # ~2 horas de embargo temporal
  # Stage 4 stability selection
  stage4_enabled: true
  stage4_n_bootstrap: 30
  stage4_block_size: 5000
  stage4_stability_threshold: 0.7
  stage4_plot: true
  stage4_random_state: 42
  stage4_bootstrap_method: block   # block|tssplit
  # ADF removed from project
  # Stage 1 explicit candidates (no regex)
  station_candidates_include:
    # OHLC níveis e derivados de nível
    - y_open
    - y_high
    - y_low
    - y_close
    - y_weighted_close
    - y_typical_price
    # Médias móveis (nível)
    - y_sma_20
    - y_sma_60
    - y_ema_12
    - y_ema_26
    # VWAP e distâncias (nível)
    - y_vwap_20
    - y_vwap_distance
    - y_vwap_60m_distance
    # Bollinger (nível/largura)
    - y_bb_lower_20_2
    - y_bb_upper_20_2
    - y_bb_width_20
    # Volatilidade/Range
    - y_atr_14
    - y_true_range
    - y_parkinson_30m
    - y_garman_klass_vol
    - y_gk_vol_30m
    - y_rv_30m
    - y_tick_volatility
    # Donchian (nível/largura)
    - y_donchian_channels_20
    - y_donchian_lower_20
    - y_donchian_upper_20
    - y_donchian_width_20
    # Spreads (nível)
    - y_avg_spread
    - y_max_spread
    - y_min_spread
    - y_spread_lvl
    # Morfologia / preços derivados (nível)
    - y_body_size
    - y_range_size
    - y_range_pct
    - y_gap_open
    - y_price_change
    - y_price_changes_count
    - y_price_velocity
  station_candidates_exclude:
    - y_avg_spread_relative
    - y_spread_rel
    - y_spread_rel_z_15m
    - y_close_z_60m
    - y_close_z_240m
    - y_z_60m_close
    - y_z_240m_close
    - y_obv_z_60m
    - y_atr_z_60m
    - y_tr_z_60m
    - y_vwap_60m_distance_slope
    - y_corr_30m
    - y_corr_60m
    - y_corr_dxy_1h
    - y_corr_dxy_4h
    - y_beta_240m
    - beta240_y_on_brent
    - beta240_y_on_dxy
    - beta240_y_on_spx
    - corr30_ofi_y_dxy
    - corr30_ret_ofi_y
    - corr30_tickvol_y_spx
    - corr60_y_dxy
    - corr60_y_spx
    - y_interaction_spread_ofi
    - y_interaction_vol_beta
    # Targets / leakage guard (já cobertos por outras listas de negação)
    - y_ret_fwd_1m
    - y_ret_fwd_3m
    - y_ret_fwd_5m
    - y_ret_fwd_10m
    - y_ret_fwd_15m
    - y_ret_fwd_20m
    - y_ret_fwd_30m
    - y_ret_fwd_60m
    - y_ret_fwd_120m
    - y_ret_fwd_240m
  # If true, drops original columns after creating frac_diff_<col>
  drop_original_after_transform: true
  # If true, drops features that didn't pass Stage 1 retention gates
  drop_nonretained_after_stage1: true

# Processing Pipeline Configuration (RTX 5090 optimized)
# Settings for data processing and pipeline execution
processing:
  batch_size: 5000  # Aumentado para RTX 5090
  chunk_size: "500MB"  # Aumentado para RTX 5090
  max_workers: 8  # Aumentado para RTX 5090
  timeout: 3600  # 60 minutes - RTX 5090 pode processar mais dados
  continue_on_error: false
  fail_fast: true

# Logging Configuration
# Logging settings for monitoring and debugging
logging:
  level: INFO
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "pipeline.log"
  max_size: "100MB"
  backup_count: 5

# Monitoring Configuration
# Performance monitoring and metrics collection
monitoring:
  metrics_enabled: true
  dashboard_enabled: true  # Set to false to disable dashboard and reduce WebSocket logs
  dashboard_port: 8888
  health_check_interval: 30

# Output Configuration
# Data output settings and file formats
output:
  output_path: "./output"
  compression: "lz4"
  format: "feather"
  version: 2

# Development Configuration
# Development and debugging options
development:
  debug_mode: false
  clean_existing_output: false
  force_reprocessing: false
  enable_profiling: false
  log_memory_usage: true
  validate_data: true
  debug_dashboard: true

# Pipeline Engine Configuration
# Individual engine settings and execution order
pipeline:
  engines:
    signal_processing:
      enabled: true
      order: 1
      description: "Signal processing (EMD decomposition)"
    stationarization:
      enabled: true
      order: 2
      description: "Stationarization techniques including fractional differentiation"
      timeout: 900  # Aumentado para RTX 5090
      retry_count: 3
    feature_engineering:
      enabled: true
      order: 3
      description: "Early feature engineering (e.g., Baxter–King over multiple sources)"
      timeout: 900  # Aumentado para RTX 5090
      retry_count: 3
    garch_models:
      enabled: true
      order: 4
      description: "GARCH volatility modeling"
      timeout: 1200  # Aumentado para RTX 5090 (GARCH pode ser mais lento)
      retry_count: 3
    statistical_tests:
      enabled: true
      order: 5
      description: "Statistical tests and analysis"
      timeout: 1800  # Aumentado para RTX 5090 (statistical tests podem ser mais lentos)
      retry_count: 3

# Error Handling Configuration
# Error handling and recovery settings
error_handling:
  continue_on_error: false
  max_retries: 3
  retry_delay: 5
  critical_error_threshold: 1

# Memory Management Configuration
# Advanced memory management settings
memory:
  # RMM Configuration (RTX 5090 conservative)
  rmm_pool_size_gb: 20.0  # RTX 5090 optimized (62.5% of 32GB)
  rmm_initial_pool_size_gb: 8.0  # RTX 5090 conservative
  rmm_maximum_pool_size_gb: 19.2  # RTX 5090 conservative (60% of 32GB)
  rmm_memory_target_fraction: 0.80  # RTX 5090 conservative
  rmm_memory_spill_threshold: 0.85  # RTX 5090 conservative
  
  # Chunked processing settings (RTX 5090 conservative)
  chunk_size: 50000
  chunk_overlap: 2000
  max_memory_gb: 20.0  # RTX 5090 optimized
  
  # Spilling configuration
  enable_spilling: true
  spill_to_disk: true
  spill_directory: "/tmp/gpu_spill"
  
  # Memory monitoring
  monitor_memory: true
  alert_threshold: 0.9
  check_interval: 10

# Performance Optimization Configuration
# GPU and computation optimization settings
optimization:
  # GPU optimization
  use_float32: true
  optimize_column_order: true
  avoid_cpu_transfers: true
  
  # Kernel optimization (RTX 5090 optimized)
  enable_custom_kernels: true
  kernel_compilation_timeout: 180  # Aumentado para RTX 5090
  
  # Memory optimization (RTX 5090 optimized)
  batch_processing: true
  batch_size: 25000  # Aumentado para RTX 5090
  cleanup_after_batch: true
  
  # Convolution optimization (RTX 5090 optimized)
  use_fft_for_large_kernels: true
  fft_threshold: 128  # Aumentado para RTX 5090

# Data Validation Configuration
# Data quality and validation settings
validation:
  # Input validation
  validate_input_data: true
  required_columns: ["timestamp", "open", "high", "low", "close", "volume"]
  expected_dtypes:
    timestamp: "datetime64[ns]"
    open: "float32"
    high: "float32"
    low: "float32"
    close: "float32"
    volume: "float32"
  
  # Output validation
  validate_output_data: true
  max_nan_percentage: 50.0
  check_infinite_values: true
  
  # Data quality thresholds
  min_rows: 100
  max_missing_percentage: 20.0
  outlier_threshold: 3.0

# Security Configuration
# Security and access control settings
security:
  # Database security
  use_ssl: false
  verify_ssl: true
  
  # R2 security
  use_encryption: true
  encryption_algorithm: "AES256"
  
  # Access control
  require_authentication: true
  session_timeout: 3600

# Selection Configuration
# Feature selection settings organized by stage
selection:
  stage3:
    model: lgbm            # lgbm
    task: auto             # auto|regression|classification
    importance_threshold: median   # median|float
    use_gpu: true
    random_state: 42
    n_estimators: 300
    learning_rate: 0.05
    feature_fraction: 0.8
    bagging_fraction: 0.8
    early_stopping_rounds: 0

# Backup and Recovery Configuration
# Data backup and recovery settings
backup:
  # Backup settings
  enable_backup: true
  backup_interval: 3600  # 1 hour
  backup_retention_days: 7
  
  # Recovery settings
  enable_auto_recovery: true
  recovery_checkpoint_interval: 300  # 5 minutes
  
  # Storage settings
  backup_directory: "./backups"
  compression: "gzip"
