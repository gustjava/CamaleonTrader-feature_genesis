#!/usr/bin/env bash
set -euo pipefail

# ====================================================================================
# SCRIPT PARA VERIFICAR ARQUIVOS DE DADOS NO SERVIDOR REMOTO
#
# Este script verifica se os arquivos de sa√≠da do pipeline foram criados
# corretamente no servidor remoto e mostra informa√ß√µes sobre eles.
# ====================================================================================

# ----------------------------- CONFIGURA√á√ïES GERAIS ---------------------------------
# Diret√≥rios do projeto
LOCAL_PROJECT_DIR="$(pwd)"
REMOTE_PROJECT_DIR="/workspace/feature_genesis"
REMOTE_OUTPUT_DIR="/workspace/feature_genesis/output"

# SSH
SSH_KEY_PATH="${SSH_KEY_PATH:-$HOME/.ssh/id_ed25519}"

# -------------------------- FUN√á√ïES AUXILIARES/VERIFICA√á√ïES -------------------------
need_cmd() { command -v "$1" &>/dev/null || { echo "Erro: '$1' n√£o encontrado. Por favor, instale-o."; exit 1; }; }

echo "Verificando depend√™ncias: jq, ssh, nc..."
need_cmd jq
need_cmd ssh
need_cmd nc
echo "Depend√™ncias OK."

# ------------------------------ CLI VAST.AI -----------------------------------------
VAST_BIN=""
if command -v vastai &>/dev/null; then
  VAST_BIN="$(command -v vastai)"
elif command -v vast &>/dev/null; then
  VAST_BIN="$(command -v vast)"
else
  echo "Erro: CLI da vast.ai ('vast' ou 'vastai') n√£o encontrado no seu PATH."
  exit 1
fi
echo "Usando vast CLI: $VAST_BIN"
"$VAST_BIN" show user >/dev/null # For√ßa o login se necess√°rio

# --------------------------- SELE√á√ÉO/CONEX√ÉO INST√ÇNCIA ------------------------------
echo -e "\n--- Inst√¢ncias ativas ---"
INSTANCES_RAW="$("$VAST_BIN" show instances --raw)"
echo "$INSTANCES_RAW" | jq -r '(["ID","Imagem","GPUs","Status"], (.[] | select(.actual_status=="running") | [.id, .image, .num_gpus, .status_msg])) | @tsv'
echo "----------------------------------------------------------------------------------"

# Seleciona a primeira inst√¢ncia em execu√ß√£o por padr√£o
FIRST_INSTANCE_ID="$(echo "$INSTANCES_RAW" | jq -r '[.[] | select(.actual_status=="running")][0].id // empty')"
if [[ -z "$FIRST_INSTANCE_ID" ]]; then
  echo "‚ùå Nenhuma inst√¢ncia em execu√ß√£o encontrada."
  exit 1
fi

if [[ -n "${AUTO:-}" || ! -t 0 ]]; then
  INSTANCE_ID="${FIRST_INSTANCE_ID}"
  echo "AUTO=1 ou stdin n√£o interativo: usando a primeira inst√¢ncia ($INSTANCE_ID)"
else
  read -t 5 -rp "Digite o ID da inst√¢ncia vast.ai (Enter para usar a primeira: $FIRST_INSTANCE_ID): " INSTANCE_ID || true
fi
INSTANCE_ID="${INSTANCE_ID:-$FIRST_INSTANCE_ID}"
[[ -z "${INSTANCE_ID}" ]] && { echo "Erro: ID da inst√¢ncia vazio."; exit 1; }

echo "‚úÖ Inst√¢ncia selecionada: $INSTANCE_ID"

# --------------------------- CONEX√ÉO SSH --------------------------------------------
echo "Aguardando SSH da inst√¢ncia $INSTANCE_ID ficar dispon√≠vel..."
SSH_HOST=""; SSH_PORT=""
for i in {1..120}; do
  SSH_URL=$("$VAST_BIN" ssh-url "$INSTANCE_ID" 2>/dev/null || echo "")
  if [[ -n "$SSH_URL" ]]; then
    SSH_HOST=$(sed -n 's#ssh://root@\([^:]*\):.*#\1#p' <<<"$SSH_URL")
    SSH_PORT=$(sed -n 's#ssh://.*:\([0-9]*\).*#\1#p' <<<"$SSH_URL")
    if [[ -n "$SSH_HOST" && -n "$SSH_PORT" ]]; then
      if nc -z -w5 "$SSH_HOST" "$SSH_PORT"; then
        echo "‚úÖ SSH pronto em $SSH_HOST:$SSH_PORT"
        break
      fi
    fi
  fi
  echo -n "."
  sleep 5
done
echo ""
[[ -z "$SSH_HOST" || -z "$SSH_PORT" ]] && { echo "Erro fatal: Timeout ao esperar pela conex√£o SSH da inst√¢ncia."; exit 1; }

# --- CONFIGURA√á√ÉO SSH ---
SSH_OPTS="-p $SSH_PORT -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o LogLevel=ERROR -i $SSH_KEY_PATH"

# --- COMANDO DE VERIFICA√á√ÉO REMOTA ---
echo -e "\nüîç Verificando arquivos de sa√≠da no servidor remoto..."

VERIFICATION_CMD="
set -e
echo '=== VERIFICA√á√ÉO DE ARQUIVOS DE SA√çDA ==='
echo 'Data/Hora: '\$(date)
echo ''

# 1. Verificar se o diret√≥rio de sa√≠da existe
echo '1. VERIFICANDO DIRET√ìRIO DE SA√çDA...'
if [ -d \"$REMOTE_OUTPUT_DIR\" ]; then
    echo \"‚úÖ Diret√≥rio de sa√≠da existe: $REMOTE_OUTPUT_DIR\"
    ls -la \"$REMOTE_OUTPUT_DIR\"
else
    echo \"‚ùå Diret√≥rio de sa√≠da N√ÉO existe: $REMOTE_OUTPUT_DIR\"
    echo \"   Verificando se existe em outros locais...\"
    find /workspace -name \"output\" -type d 2>/dev/null | head -5 || echo \"   Nenhum diret√≥rio 'output' encontrado\"
    find /data -name \"output\" -type d 2>/dev/null | head -5 || echo \"   Nenhum diret√≥rio 'output' encontrado em /data\"
fi
echo ''

# 2. Procurar por arquivos Feather em todo o workspace
echo '2. PROCURANDO ARQUIVOS FEATHER...'
echo \"Procurando em $REMOTE_PROJECT_DIR...\"
find \"$REMOTE_PROJECT_DIR\" -name \"*.feather\" -type f 2>/dev/null | head -20 || echo \"   Nenhum arquivo .feather encontrado\"

echo \"Procurando em /data...\"
find /data -name \"*.feather\" -type f 2>/dev/null | head -20 || echo \"   Nenhum arquivo .feather encontrado\"

echo \"Procurando em todo o sistema...\"
find / -name \"*.feather\" -type f 2>/dev/null | grep -E '(feature_genesis|output|data)' | head -20 || echo \"   Nenhum arquivo .feather relevante encontrado\"
echo ''

# 3. Verificar estrutura de diret√≥rios do projeto
echo '3. ESTRUTURA DO PROJETO...'
if [ -d \"$REMOTE_PROJECT_DIR\" ]; then
    echo \"Estrutura de $REMOTE_PROJECT_DIR:\"
    ls -la \"$REMOTE_PROJECT_DIR\" | head -20
    echo ''
    
    # Verificar se h√° logs
    if [ -d \"$REMOTE_PROJECT_DIR/logs\" ]; then
        echo \"Logs dispon√≠veis:\"
        ls -la \"$REMOTE_PROJECT_DIR/logs/\" | head -10
    fi
else
    echo \"‚ùå Diret√≥rio do projeto n√£o existe: $REMOTE_PROJECT_DIR\"
fi
echo ''

# 4. Verificar processos em execu√ß√£o
echo '4. PROCESSOS EM EXECU√á√ÉO...'
echo \"Processos Python relacionados ao pipeline:\"
ps aux | grep -E '(python.*orchestration|dask-worker|dask-scheduler)' | grep -v grep || echo \"   Nenhum processo do pipeline encontrado\"
echo ''

# 5. Verificar uso de disco e mem√≥ria
echo '5. RECURSOS DO SISTEMA...'
echo \"Uso de disco:\"
df -h | grep -E '(Filesystem|/workspace|/data)' || df -h | head -5
echo ''
echo \"Uso de mem√≥ria:\"
free -h
echo ''

# 6. Verificar se h√° arquivos tempor√°rios ou parciais
echo '6. ARQUIVOS TEMPOR√ÅRIOS OU PARCIAIS...'
echo \"Arquivos .tmp ou .part:\"
find \"$REMOTE_PROJECT_DIR\" -name \"*.tmp\" -o -name \"*.part\" 2>/dev/null | head -10 || echo \"   Nenhum arquivo tempor√°rio encontrado\"
echo ''

# 7. Verificar logs do sistema
echo '7. LOGS DO SISTEMA...'
echo \"√öltimas linhas do syslog (se dispon√≠vel):\"
tail -n 20 /var/log/syslog 2>/dev/null || echo \"   Syslog n√£o dispon√≠vel\"
echo ''

# 8. Verificar se o pipeline foi executado recentemente
echo '8. HIST√ìRICO DE EXECU√á√ÉO...'
echo \"Arquivos modificados nas √∫ltimas 24h:\"
find \"$REMOTE_PROJECT_DIR\" -type f -mtime -1 2>/dev/null | head -10 || echo \"   Nenhum arquivo modificado recentemente\"
echo ''

# 9. Verificar configura√ß√£o do projeto
echo '9. CONFIGURA√á√ÉO DO PROJETO...'
if [ -f \"$REMOTE_PROJECT_DIR/config/config.yaml\" ]; then
    echo \"Configura√ß√£o de sa√≠da:\"
    grep -A 5 -B 2 \"output:\" \"$REMOTE_PROJECT_DIR/config/config.yaml\" || echo \"   Se√ß√£o output n√£o encontrada\"
else
    echo \"‚ùå Arquivo de configura√ß√£o n√£o encontrado\"
fi
echo ''

# 10. Resumo final
echo '=== RESUMO FINAL ==='
echo \"Diret√≥rio de sa√≠da configurado: $REMOTE_OUTPUT_DIR\"
echo \"Diret√≥rio existe: \$([ -d \"$REMOTE_OUTPUT_DIR\" ] && echo 'SIM' || echo 'N√ÉO')\"
echo \"Arquivos .feather encontrados: \$(find \"$REMOTE_PROJECT_DIR\" -name \"*.feather\" 2>/dev/null | wc -l)\"
echo \"Processos do pipeline ativos: \$(ps aux | grep -E '(python.*orchestration|dask-worker|dask-scheduler)' | grep -v grep | wc -l)\"
echo \"Espa√ßo livre em disco: \$(df -h /workspace | tail -1 | awk '{print \$4}')\"
echo \"Mem√≥ria livre: \$(free -h | grep Mem | awk '{print \$7}')\"
echo ''
echo '=== FIM DA VERIFICA√á√ÉO ==='
"

# Executa o comando de verifica√ß√£o
echo "Executando verifica√ß√£o remota..."
ssh $SSH_OPTS "root@$SSH_HOST" "$VERIFICATION_CMD"

echo -e "\n‚úÖ Verifica√ß√£o conclu√≠da!"
echo -e "\nüí° DICAS:"
echo "   ‚Ä¢ Se n√£o houver arquivos de sa√≠da, verifique se o pipeline foi executado"
echo "   ‚Ä¢ Verifique os logs em $REMOTE_PROJECT_DIR/logs/"
echo "   ‚Ä¢ Execute o pipeline novamente se necess√°rio: ./run_pipeline_vast.sh"
echo "   ‚Ä¢ Use o script de valida√ß√£o local: python validate_output.py"
